<!DOCTYPE html>
<html lang="ar" dir="rtl">

    <%- include("./partials/head.ejs") %>

<body>
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-2">
                <%- include("./partials/nav.ejs") %>
            </div>

            <div class="col-lg-10">
                <main class="p-4">
                    <div class="row mb-3">
                        <div class="col-md-6"></div>
                        <div class="col-md-6">
                            <div class="left">
                                <%- include("./partials/top.ejs") %>
                            </div>
                        </div>
                    </div>

                    <!-- Header Section -->
                    <div class="row mb-4">
                        <div class="col-12">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h2 class="mb-1 text-white fw-bold">
                                        <i class="fab fa-whatsapp text-success me-2"></i>
                                        إدارة واتساب
                                    </h2>
                                    <p class="text-muted mb-0">إدارة جلسات واتساب وإرسال الرسائل</p>
                                </div>
                                <div class="d-flex gap-2">
                                    <button id="refreshInstances" class="btn btn-outline-primary btn-sm">
                                        <i class="fas fa-sync-alt me-1"></i>
                                        تحديث
                                    </button>
                                    <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#addSessionModal" disabled>
                                        <i class="fas fa-plus me-1"></i>
                                        إضافة جلسة
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Sessions Grid -->
                    <div class="row" id="sessionsContainer">
                        <div class="col-12 text-center py-5" id="loadingSessions">
                            <div class="spinner-border text-success" role="status">
                                <span class="visually-hidden">جاري التحميل...</span>
                            </div>
                            <p class="mt-3 text-muted">جاري تحميل الجلسات...</p>
                        </div>
                        
                        <div class="col-12 text-center py-5 d-none" id="noSessions">
                            <div class="empty-state">
                                <i class="fab fa-whatsapp fa-4x text-muted mb-3"></i>
                                <h5 class="text-white">لا توجد جلسات واتساب</h5>
                                <p class="text-muted">ابدأ بإضافة جلسة واتساب جديدة</p>
                                <button class="btn btn-success" data-bs-toggle="modal" data-bs-target="#addSessionModal" disabled>
                                    <i class="fas fa-plus me-2"></i>
                                    إضافة جلسة جديدة
                                </button>
                            </div>
                        </div>
                    </div>
                </main>
            </div>
        </div>
    </div>

    <!-- Add Session Modal -->
    <div class="modal fade" id="addSessionModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header border-0 pb-0">
                    <h5 class="modal-title fw-bold text-white">
                        <i class="fab fa-whatsapp text-success me-2"></i>
                        إضافة جلسة واتساب جديدة
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body pt-0">
                    <form id="createSessionForm">
                        <div class="mb-3">
                            <label for="sessionName" class="form-label fw-semibold text-white">اسم الجلسة</label>
                            <input type="text" class="form-control" id="sessionName" placeholder="مثال: واتساب الأعمال" required>
                        </div>
                        <div class="mb-3">
                            <label for="phoneNumber" class="form-label fw-semibold text-white">رقم الهاتف (اختياري)</label>
                            <input type="text" class="form-control" id="phoneNumber" placeholder="+966501234567">
                            <div class="form-text text-muted">سيتم استخدام هذا الرقم للعرض فقط</div>
                        </div>
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-plus me-2"></i>
                                إنشاء الجلسة
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- QR Code Modal -->
    <div class="modal fade" id="qrCodeModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header border-0 pb-0">
                    <h5 class="modal-title fw-bold text-white">
                        <i class="fas fa-qrcode text-success me-2"></i>
                        ربط واتساب
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body pt-0 text-center">
                    <div id="qrCodeContainer" class="mb-4">
                        <div class="spinner-border text-success" role="status">
                            <span class="visually-hidden">جاري التحميل...</span>
                        </div>
                        <p class="mt-3 text-muted">جاري إنشاء رمز QR...</p>
                    </div>
                    
                    <div class="alert alert-info text-start">
                        <h6 class="alert-heading fw-bold mb-2">
                            <i class="fas fa-info-circle me-2"></i>
                            خطوات الربط
                        </h6>
                        <ol class="mb-0">
                            <li>افتح تطبيق واتساب على هاتفك</li>
                            <li>اذهب إلى <strong>الإعدادات</strong> → <strong>الأجهزة المرتبطة</strong></li>
                            <li>انقر على <strong>ربط جهاز</strong></li>
                            <li>امسح رمز QR الموجود أعلاه</li>
                        </ol>
                    </div>
                    
                    <div class="d-flex justify-content-center gap-2">
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">إغلاق</button>
                        <button type="button" class="btn btn-primary" id="refreshQRBtn">
                            <i class="fas fa-sync-alt me-2"></i>
                            تحديث الرمز
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Session Details Modal -->
    <div class="modal fade" id="sessionDetailsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header border-0 pb-0">
                    <h5 class="modal-title fw-bold text-white">
                        <i class="fas fa-info-circle text-success me-2"></i>
                        تفاصيل الجلسة
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body pt-0">
                    <div id="sessionDetailsContent">
                        <!-- Session details will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Cairo', sans-serif;
        }

        body {
            background-color: #121212;
            color: #ffffff;
        }
        
        .session-card {
            background-color: #1e1e1e;
            border: 1px solid rgba(37, 211, 102, 0.2);
            border-radius: 15px;
            overflow: hidden;
            height: 100%;
            transition: all 0.3s ease;
            margin-bottom: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
        }
        
        .session-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
            border-color: rgba(37, 211, 102, 0.4);
        }

        .session-header {
            background: linear-gradient(135deg, #128C7E, #25D366);
            color: white;
            padding: 15px 20px;
            font-weight: 600;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            position: relative;
        }

        .session-header::after {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            width: 60px;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1));
        }

        .session-status {
            display: inline-flex;
            align-items: center;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-connected {
            background-color: rgba(37, 211, 102, 0.2);
            color: #25D366;
            border: 1px solid rgba(37, 211, 102, 0.3);
        }

        .status-connecting {
            background-color: rgba(255, 193, 7, 0.2);
            color: #ffc107;
            border: 1px solid rgba(255, 193, 7, 0.3);
        }

        .status-disconnected {
            background-color: rgba(220, 53, 69, 0.2);
            color: #dc3545;
            border: 1px solid rgba(220, 53, 69, 0.3);
        }

        .status-qr {
            background-color: rgba(13, 110, 253, 0.2);
            color: #0d6efd;
            border: 1px solid rgba(13, 110, 253, 0.3);
        }

        .session-body {
            padding: 20px;
            background-color: #1e1e1e;
        }
        
        .session-info {
            display: flex;
            align-items: center;
            margin-bottom: 0.75rem;
            padding: 0.5rem;
            background-color: rgba(255, 255, 255, 0.03);
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .session-info:hover {
            background-color: rgba(255, 255, 255, 0.05);
            transform: translateX(2px);
        }

        .session-info:last-child {
            margin-bottom: 0;
        }

        .session-info-icon {
            width: 32px;
            height: 32px;
            background-color: rgba(37, 211, 102, 0.1);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-left: 0.75rem;
            color: #25D366;
        }

        .session-info-content {
            flex: 1;
        }
        
        .session-info-label {
            font-size: 0.75rem;
            color: #9ca3af;
            margin-bottom: 0.25rem;
        }

        .session-info-value {
            font-weight: 600;
            color: #e0e0e0;
            font-family: 'Courier New', monospace;
            letter-spacing: 0.5px;
        }

        .session-actions {
            padding: 20px;
            background: linear-gradient(to bottom, #2d2d2d, #232323);
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .btn-action {
            border-radius: 10px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
            border: none;
            position: relative;
            overflow: hidden;
            z-index: 1;
        }

        .btn-action::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, rgba(255,255,255,0), rgba(255,255,255,0.1), rgba(255,255,255,0));
            transition: left 0.7s ease;
            z-index: -1;
        }

        .btn-action:hover::before {
            left: 100%;
        }

        .btn-action:not(:disabled):hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(37, 211, 102, 0.4);
        }
        
        .btn-action:disabled {
            background: linear-gradient(135deg, #495057, #343a40);
            opacity: 0.7;
        }
        
        .empty-state {
            padding: 3rem 1rem;
        }

        .empty-state i {
            opacity: 0.5;
        }

        .qr-container {
            background-color: #ffffff;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            margin-bottom: 20px;
            transition: all 0.5s ease;
            position: relative;
            overflow: hidden;
        }

        .qr-container img {
            max-width: 250px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .modal-content {
            border: none;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
            background-color: #1a1a1a;
            border: 1px solid rgba(37, 211, 102, 0.2);
        }

        .modal-header {
            background: linear-gradient(135deg, #128C7E, #25D366);
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .modal-body {
            background-color: #1a1a1a;
        }
        
        .form-control {
            background-color: #2d2d2d;
            border: 1px solid #25D366;
            color: #ffffff;
            border-radius: 10px;
            padding: 12px 15px;
            margin-bottom: 15px;
            transition: all 0.3s ease;
        }
        
        .form-control:focus {
            background-color: #2d2d2d;
            border-color: #25D366;
            color: #ffffff;
            box-shadow: 0 0 0 0.25rem rgba(37, 211, 102, 0.25);
            transform: translateY(-2px);
        }
        
        .form-control::placeholder {
            color: #aaaaaa;
        }

        .btn {
            border-radius: 10px;
            font-weight: 600;
            padding: 12px 20px;
            transition: all 0.3s ease;
        }
        
        .btn-success {
            background: linear-gradient(135deg, #25D366, #128C7E);
            border: none;
            color: #ffffff;
        }

        .btn-success:hover {
            background: linear-gradient(135deg, #128C7E, #075E54);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(37, 211, 102, 0.3);
        }

        .btn-outline-primary {
            border-color: #25D366;
            color: #25D366;
            background: transparent;
        }

        .btn-outline-primary:hover {
            background-color: #25D366;
            border-color: #25D366;
            color: #000000;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(37, 211, 102, 0.3);
        }
        
        .btn-primary {
            background: linear-gradient(135deg, #25D366, #128C7E);
            border: none;
        }
        
        .btn-primary:hover {
            background: linear-gradient(135deg, #128C7E, #075E54);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(37, 211, 102, 0.3);
        }

        .btn-outline-secondary {
            border-color: #6c757d;
            color: #6c757d;
            background: transparent;
        }

        .btn-outline-secondary:hover {
            background-color: #6c757d;
            border-color: #6c757d;
            color: #ffffff;
        }
        
        .alert {
            border-radius: 12px;
            border: none;
        }
        
        .alert-info {
            background-color: rgba(37, 211, 102, 0.1);
            border-color: rgba(37, 211, 102, 0.3);
            color: #25D366;
            border-radius: 12px;
            padding: 15px;
        }

        .alert-success {
            background-color: rgba(40, 167, 69, 0.1);
            border-color: rgba(40, 167, 69, 0.3);
            color: #28a745;
        }

        .alert-danger {
            background-color: rgba(220, 53, 69, 0.1);
            border-color: rgba(220, 53, 69, 0.3);
            color: #dc3545;
        }

        .spinner-border {
            width: 2rem;
            height: 2rem;
        }

        .text-success {
            color: #25D366 !important;
        }

        .text-muted {
            color: #aaaaaa !important;
        }

        .text-white {
            color: #ffffff !important;
        }

        .text-primary {
            color: #25D366 !important;
        }

        .fw-bold {
            font-weight: 700 !important;
        }

        .fw-semibold {
            font-weight: 600 !important;
        }

        .me-2 {
            margin-right: 0.5rem !important;
        }

        .mb-1 {
            margin-bottom: 0.25rem !important;
        }

        .mb-2 {
            margin-bottom: 0.5rem !important;
        }

        .mb-3 {
            margin-bottom: 1rem !important;
        }

        .mb-4 {
            margin-bottom: 1.5rem !important;
        }

        .mt-3 {
            margin-top: 1rem !important;
        }

        .py-5 {
            padding-top: 3rem !important;
            padding-bottom: 3rem !important;
        }

        .p-4 {
            padding: 1.5rem !important;
        }

        .gap-2 {
            gap: 0.5rem !important;
        }

        .d-none {
            display: none !important;
        }

        .d-flex {
            display: flex !important;
        }

        .d-grid {
            display: grid !important;
        }

        .justify-content-between {
            justify-content: space-between !important;
        }

        .justify-content-center {
            justify-content: center !important;
        }

        .align-items-center {
            align-items: center !important;
        }

        .text-center {
            text-align: center !important;
        }

        .text-start {
            text-align: start !important;
        }

        .border-0 {
            border: 0 !important;
        }

        .border-top {
            border-top: 1px solid #dee2e6 !important;
        }

        .pb-0 {
            padding-bottom: 0 !important;
        }

        .pt-0 {
            padding-top: 0 !important;
        }

        .visually-hidden {
            position: absolute !important;
            width: 1px !important;
            height: 1px !important;
            padding: 0 !important;
            margin: -1px !important;
            overflow: hidden !important;
            clip: rect(0, 0, 0, 0) !important;
            white-space: nowrap !important;
            border: 0 !important;
        }

        .dropdown-menu {
            background-color: #2d2d2d;
            border: 1px solid rgba(37, 211, 102, 0.2);
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        }

        .dropdown-item {
            color: #ffffff;
            transition: all 0.3s ease;
        }
        
        .dropdown-item:hover {
            background-color: rgba(37, 211, 102, 0.1);
            color: #25D366;
        }

        .btn-close-white {
            filter: invert(1) grayscale(100%) brightness(200%);
        }

        .btn-light {
            background-color: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.2);
            color: #ffffff;
        }

        .btn-light:hover {
            background-color: rgba(255, 255, 255, 0.2);
            border-color: rgba(255, 255, 255, 0.3);
            color: #ffffff;
        }

        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
        }
    </style>

    <script src="../assest/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const socket = io();
            const sessionsContainer = document.getElementById('sessionsContainer');
            const loadingSessions = document.getElementById('loadingSessions');
            const noSessions = document.getElementById('noSessions');
            const createSessionForm = document.getElementById('createSessionForm');
            const qrCodeModal = new bootstrap.Modal(document.getElementById('qrCodeModal'));
            const sessionDetailsModal = new bootstrap.Modal(document.getElementById('sessionDetailsModal'));
            let currentSessionId = null;
            let qrRefreshTimer = null;
            let qrRefreshCountdown = 45; // 45 seconds countdown

            // Load sessions on page load
            loadSessions();

            // Refresh button with loading state
            document.getElementById('refreshInstances').addEventListener('click', async function() {
                const refreshBtn = this;
                const originalText = refreshBtn.innerHTML;
                
                // Show loading state
                refreshBtn.disabled = true;
                refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>جاري التحديث...';
                
                try {
                    await loadSessions();
                    showAlert('تم تحديث الجلسات بنجاح', 'success');
                } catch (error) {
                    showAlert('حدث خطأ أثناء تحديث الجلسات', 'danger');
                } finally {
                    // Restore button state
                    refreshBtn.disabled = false;
                    refreshBtn.innerHTML = originalText;
                }
            });

            // Create session form
            createSessionForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const sessionName = document.getElementById('sessionName').value;
                const phoneNumber = document.getElementById('phoneNumber').value;
                
                try {
                    const response = await fetch('/teacher/createInstance', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ 
                            name: sessionName, 
                            phoneNumber: phoneNumber 
                        })
                    });
                    
                    const data = await response.json();
                    
                    if (!data.success) {
                        throw new Error(data.message);
                    }
                    
                    // Close modal and reset form
                    bootstrap.Modal.getInstance(document.getElementById('addSessionModal')).hide();
                    createSessionForm.reset();
                    
                    // Reload sessions
                    loadSessions();
                    
                    // Show success message
                    showAlert('تم إنشاء الجلسة بنجاح', 'success');
                    
                } catch (error) {
                    console.error('Error creating session:', error);
                    showAlert('حدث خطأ أثناء إنشاء الجلسة', 'danger');
                }
            });

            // Load sessions function
            async function loadSessions() {
                try {
                    loadingSessions.classList.remove('d-none');
                    noSessions.classList.add('d-none');
                    
                    const response = await fetch('/teacher/getInstances');
                    const data = await response.json();
                    
                    console.log('API Response:', data);
                    
                    loadingSessions.classList.add('d-none');
                    
                    if (!data.success) {
                        throw new Error(data.message);
                    }
                    
                    const sessions = data.data || [];
                    
                    if (!sessions || sessions.length === 0) {
                        noSessions.classList.remove('d-none');
                    } else {
                        renderSessions(sessions);
                    }
                } catch (error) {
                    console.error('Error loading sessions:', error);
                    loadingSessions.classList.add('d-none');
                    showAlert('حدث خطأ أثناء تحميل الجلسات', 'danger');
                }
            }

            // Render sessions
            function renderSessions(sessions) {
                sessionsContainer.innerHTML = '';
                
                sessions.forEach(session => {
                    const sessionCard = createSessionCard(session);
                    sessionsContainer.appendChild(sessionCard);
                });
            }

            // Create session card
            function createSessionCard(session) {
                const sessionId = session.id || session.sessionId;
                const phoneNumber = session.phone_number || session.phoneNumber || '-';
                const createdAt = session.created_at || session.createdAt;
                const status = session.status || 'disconnected';
                
                const statusClass = getStatusClass(status);
                const statusText = getStatusText(status);
                
                const card = document.createElement('div');
                card.className = 'col-lg-4 col-md-6 mb-4';
                card.dataset.sessionId = sessionId;
                
                card.innerHTML = `
                    <div class="session-card">
                        <div class="session-header">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <h6 class="mb-1 fw-bold">${session.name}</h6>
                                    <span class="session-status status-${statusClass}">
                                        <i class="fas ${getStatusIcon(status)} me-1"></i>
                                        ${statusText}
                                    </span>
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-light dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                        <i class="fas fa-ellipsis-v"></i>
                            </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="#" onclick="showSessionDetails('${sessionId}')">
                                            <i class="fas fa-info-circle me-2"></i>التفاصيل
                                        </a></li>
                                        <li><a class="dropdown-item" href="#" onclick="deleteSession('${sessionId}')">
                                            <i class="fas fa-trash me-2"></i>حذف
                                        </a></li>
                                    </ul>
                        </div>
                                </div>
                            </div>
                            
                        <div class="session-body">
                            <div class="session-info">
                                <div class="session-info-icon">
                                    <i class="fas fa-phone"></i>
                                </div>
                                <div class="session-info-content">
                                    <div class="session-info-label">رقم الهاتف</div>
                                    <div class="session-info-value">${phoneNumber}</div>
                                </div>
                            </div>
                            
                            <div class="session-info">
                                <div class="session-info-icon">
                                    <i class="fas fa-calendar"></i>
                                </div>
                                <div class="session-info-content">
                                    <div class="session-info-label">تاريخ الإنشاء</div>
                                    <div class="session-info-value">${new Date(createdAt).toLocaleDateString('ar-EG')}</div>
                                    </div>
                                </div>
                            </div>
                            
                        <div class="session-actions">
                            <div class="d-grid gap-2">
                                ${status === 'connected' ? 
                                    `<button class="btn btn-success btn-action" disabled>
                                        <i class="fas fa-check me-2"></i>متصل
                                    </button>` :
                                    `<button class="btn btn-primary btn-action" onclick="connectSession('${sessionId}')">
                                        <i class="fas fa-qrcode me-2"></i>ربط واتساب
                                    </button>`
                                }
                            </div>
                        </div>
                    </div>
                `;
                
                return card;
            }
            
            // Connect session
            window.connectSession = async function(sessionId) {
                currentSessionId = sessionId;
                qrCodeModal.show();
                
                // Clear any existing timer
                if (qrRefreshTimer) {
                    clearInterval(qrRefreshTimer);
                    qrRefreshTimer = null;
                }
                
                // Reset countdown
                qrRefreshCountdown = 45;
                
                try {
                    await generateAndDisplayQR(sessionId);
                    startQRRefreshTimer(sessionId);
                } catch (error) {
                    console.error('Error connecting session:', error);
                    document.getElementById('qrCodeContainer').innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            ${error.message}
                        </div>
                    `;
                }
            };

            // Generate and display QR code
            async function generateAndDisplayQR(sessionId) {
                const qrContainer = document.getElementById('qrCodeContainer');
                
                // Show loading state
                qrContainer.innerHTML = `
                    <div class="spinner-border text-success" role="status">
                        <span class="visually-hidden">جاري التحميل...</span>
                    </div>
                    <p class="mt-3 text-muted">جاري إنشاء رمز QR...</p>
                `;
                
                const response = await fetch(`/teacher/generateQrCode/${sessionId}`);
                const data = await response.json();
                
                if (!data.success) {
                    throw new Error(data.message);
                }
                
                if (data.qrCode) {
                    // Check if it's a data URL (image) or raw data
                    if (data.qrCode.startsWith('data:image/')) {
                        // It's a proper image
                        qrContainer.innerHTML = `
                            <div class="qr-container">
                                <img src="${data.qrCode}" alt="QR Code" class="img-fluid">
                                <div class="mt-3">
                                    <small class="text-muted">
                                        <i class="fas fa-clock me-1"></i>
                                        سيتم تحديث الرمز تلقائياً خلال <span id="qrCountdown">${qrRefreshCountdown}</span> ثانية
                                    </small>
                                </div>
                            </div>
                        `;
                    } else {
                        // It's raw QR data, show instructions
                        qrContainer.innerHTML = `
                            <div class="alert alert-info">
                                <h6 class="alert-heading">
                                    <i class="fas fa-info-circle me-2"></i>
                                    QR Code Data Received
                                </h6>
                                <p class="mb-2">The QR code data has been received but needs to be converted to an image.</p>
                                <div class="bg-dark p-3 rounded">
                                    <code class="text-light">${data.qrCode.substring(0, 100)}...</code>
                                </div>
                                <p class="mt-2 mb-0">
                                    <strong>Instructions:</strong> Please use a QR code generator to convert this data into a scannable QR code.
                                </p>
                                <div class="mt-3">
                                    <small class="text-muted">
                                        <i class="fas fa-clock me-1"></i>
                                        سيتم تحديث الرمز تلقائياً خلال <span id="qrCountdown">${qrRefreshCountdown}</span> ثانية
                                    </small>
                                </div>
                            </div>
                        `;
                    }
                    
                    // Start polling for status
                    startStatusPolling(sessionId);
                } else {
                    throw new Error('لم يتم استلام رمز QR');
                }
            }

            // Start QR refresh timer
            function startQRRefreshTimer(sessionId) {
                if (qrRefreshTimer) {
                    clearInterval(qrRefreshTimer);
                }
                
                qrRefreshTimer = setInterval(async () => {
                    qrRefreshCountdown--;
                    
                    // Update countdown display
                    const countdownElement = document.getElementById('qrCountdown');
                    if (countdownElement) {
                        countdownElement.textContent = qrRefreshCountdown;
                    }
                    
                    // When countdown reaches 0, regenerate QR code
                    if (qrRefreshCountdown <= 0) {
                        clearInterval(qrRefreshTimer);
                        qrRefreshTimer = null;
                        
                        try {
                            // Use the new regenerate endpoint
                            const response = await fetch(`/teacher/regenerateQrCode/${sessionId}`);
                            const data = await response.json();
                            
                            if (!data.success) {
                                throw new Error(data.message);
                            }
                            
                            if (data.qrCode) {
                                const qrContainer = document.getElementById('qrCodeContainer');
                                
                                // Check if it's a data URL (image) or raw data
                                if (data.qrCode.startsWith('data:image/')) {
                                    // It's a proper image
                                    qrContainer.innerHTML = `
                                        <div class="qr-container">
                                            <img src="${data.qrCode}" alt="QR Code" class="img-fluid">
                                            <div class="mt-3">
                                                <small class="text-muted">
                                                    <i class="fas fa-clock me-1"></i>
                                                    سيتم تحديث الرمز تلقائياً خلال <span id="qrCountdown">${qrRefreshCountdown}</span> ثانية
                                                </small>
                                            </div>
                                        </div>
                                    `;
                                } else {
                                    // It's raw QR data, show instructions
                                    qrContainer.innerHTML = `
                                        <div class="alert alert-info">
                                            <h6 class="alert-heading">
                                                <i class="fas fa-info-circle me-2"></i>
                                                QR Code Data Received
                                            </h6>
                                            <p class="mb-2">The QR code data has been received but needs to be converted to an image.</p>
                                            <div class="bg-dark p-3 rounded">
                                                <code class="text-light">${data.qrCode.substring(0, 100)}...</code>
                                            </div>
                                            <p class="mt-2 mb-0">
                                                <strong>Instructions:</strong> Please use a QR code generator to convert this data into a scannable QR code.
                                            </p>
                                            <div class="mt-3">
                                                <small class="text-muted">
                                                    <i class="fas fa-clock me-1"></i>
                                                    سيتم تحديث الرمز تلقائياً خلال <span id="qrCountdown">${qrRefreshCountdown}</span> ثانية
                                                </small>
                                            </div>
                                        </div>
                                    `;
                                }
                            }
                            
                            qrRefreshCountdown = 45; // Reset countdown
                            startQRRefreshTimer(sessionId); // Restart timer
                        } catch (error) {
                            console.error('Error regenerating QR code:', error);
                            const qrContainer = document.getElementById('qrCodeContainer');
                            qrContainer.innerHTML = `
                                <div class="alert alert-danger">
                                    <i class="fas fa-exclamation-triangle me-2"></i>
                                    فشل في تحديث رمز QR: ${error.message}
                                </div>
                            `;
                        }
                    }
                }, 1000);
            }

            // Refresh QR button with loading state
            document.getElementById('refreshQRBtn').addEventListener('click', async function() {
                if (!currentSessionId) return;
                
                const refreshBtn = this;
                const originalText = refreshBtn.innerHTML;
                
                // Show loading state
                refreshBtn.disabled = true;
                refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>جاري التحديث...';
                
                try {
                    // Reset countdown
                    qrRefreshCountdown = 45;
                    
                    // Clear existing timer
                    if (qrRefreshTimer) {
                        clearInterval(qrRefreshTimer);
                        qrRefreshTimer = null;
                    }
                    
                    await generateAndDisplayQR(currentSessionId);
                    startQRRefreshTimer(currentSessionId);
                    
                    showAlert('تم تحديث رمز QR بنجاح', 'success');
                } catch (error) {
                    console.error('Error refreshing QR code:', error);
                    showAlert('حدث خطأ أثناء تحديث رمز QR', 'danger');
                } finally {
                    // Restore button state
                    refreshBtn.disabled = false;
                    refreshBtn.innerHTML = originalText;
                }
            });

            // Show session details
            window.showSessionDetails = async function(sessionId) {
                try {
                    const response = await fetch(`/teacher/checkRealInstanceStatus/${sessionId}`);
                    const data = await response.json();
                    
                    if (data.success) {
                        const detailsContent = document.getElementById('sessionDetailsContent');
                        detailsContent.innerHTML = `
                            <div class="session-info">
                                <div class="session-info-icon">
                                    <i class="fas fa-info-circle"></i>
                                </div>
                                <div class="session-info-content">
                                    <div class="session-info-label">حالة الجلسة</div>
                                    <div class="session-info-value">${getStatusText(data.status)}</div>
                                </div>
                            </div>
                            <div class="session-info">
                                <div class="session-info-icon">
                                    <i class="fas fa-clock"></i>
                                </div>
                                <div class="session-info-content">
                                    <div class="session-info-label">آخر تحديث</div>
                                    <div class="session-info-value">${new Date().toLocaleString('ar-EG')}</div>
                                </div>
                            </div>
                        `;
                        
                        sessionDetailsModal.show();
                    }
                } catch (error) {
                    console.error('Error loading session details:', error);
                    showAlert('حدث خطأ أثناء تحميل التفاصيل', 'danger');
                }
            };

            // Delete session
            window.deleteSession = async function(sessionId) {
                if (confirm('هل أنت متأكد من حذف هذه الجلسة؟')) {
                    try {
                        const response = await fetch(`/teacher/deleteInstance/${sessionId}`, {
                            method: 'DELETE'
                        });
                        
                        const data = await response.json();
                        
                        if (!data.success) {
                            throw new Error(data.message);
                        }
                        
                        // Remove the session card
                        const card = document.querySelector(`[data-session-id="${sessionId}"]`);
                        if (card) {
                            card.remove();
                        }
                        
                        // Check if no sessions left
                        if (sessionsContainer.children.length === 0) {
                            noSessions.classList.remove('d-none');
                        }
                        
                        showAlert('تم حذف الجلسة بنجاح', 'success');
                    } catch (error) {
                        console.error('Error deleting session:', error);
                        showAlert('حدث خطأ أثناء حذف الجلسة', 'danger');
                    }
                }
            };

            // Status polling
            let pollingInterval;
            function startStatusPolling(sessionId) {
                if (pollingInterval) {
                    clearInterval(pollingInterval);
                }
                
                pollingInterval = setInterval(async () => {
                    try {
                        const response = await fetch(`/teacher/checkRealInstanceStatus/${sessionId}`);
                        const data = await response.json();
                        
                        if (data.success && data.status === 'connected') {
                            clearInterval(pollingInterval);
                            qrCodeModal.hide();
                            loadSessions();
                            showAlert('تم ربط واتساب بنجاح!', 'success');
                        }
                    } catch (error) {
                        console.error('Error polling status:', error);
                    }
                }, 3000);
            }

            // Socket events
            socket.on('instance-status-change', function(data) {
                const card = document.querySelector(`[data-session-id="${data.instanceId}"]`);
                if (card) {
                    // Update card status
                    const statusElement = card.querySelector('.session-status');
                    const statusClass = getStatusClass(data.status);
                    const statusText = getStatusText(data.status);
                    
                    statusElement.className = `session-status status-${statusClass}`;
                    statusElement.innerHTML = `<i class="fas ${getStatusIcon(data.status)} me-1"></i>${statusText}`;
                    
                    // Update action button
                    const actionButton = card.querySelector('.btn-action');
                    if (data.status === 'connected') {
                        actionButton.className = 'btn btn-success btn-action';
                        actionButton.disabled = true;
                        actionButton.innerHTML = '<i class="fas fa-check me-2"></i>متصل';
                    }
                }
            });

            socket.on('instance-deleted', function(data) {
                const card = document.querySelector(`[data-session-id="${data.instanceId}"]`);
                if (card) {
                    card.remove();
                }
                if (sessionsContainer.children.length === 0) {
                    noSessions.classList.remove('d-none');
                }
            });

            // Utility functions
            function getStatusClass(status) {
                switch(status.toLowerCase()) {
                    case 'connected':
                    case 'authenticated':
                    case 'ready':
                        return 'connected';
                    case 'connecting':
                    case 'initializing':
                        return 'connecting';
                    case 'qr':
                    case 'need_scan':
                    case 'require_qr':
                    case 'unpaired':
                    case 'unpaired_idle':
                        return 'qr';
                    case 'logged_out':
                    case 'disconnected':
                    default:
                        return 'disconnected';
                }
            }

            function getStatusText(status) {
                switch(status.toLowerCase()) {
                    case 'connected':
                    case 'authenticated':
                    case 'ready':
                        return 'متصل';
                    case 'connecting':
                    case 'initializing':
                        return 'جاري الاتصال';
                    case 'qr':
                    case 'need_scan':
                    case 'require_qr':
                    case 'unpaired':
                    case 'unpaired_idle':
                        return 'في انتظار الربط';
                    case 'logged_out':
                    case 'disconnected':
                    default:
                        return 'غير متصل';
                }
            }

            function getStatusIcon(status) {
                switch(status.toLowerCase()) {
                    case 'connected':
                    case 'authenticated':
                    case 'ready':
                        return 'fa-check-circle';
                    case 'connecting':
                    case 'initializing':
                        return 'fa-sync-alt fa-spin';
                    case 'qr':
                    case 'need_scan':
                    case 'require_qr':
                    case 'unpaired':
                    case 'unpaired_idle':
                        return 'fa-qrcode';
                    case 'logged_out':
                    case 'disconnected':
                    default:
                        return 'fa-times-circle';
                }
            }

            function showAlert(message, type) {
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
                alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
                alertDiv.innerHTML = `
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                `;
                
                document.body.appendChild(alertDiv);
                
                        setTimeout(() => {
                    if (alertDiv.parentNode) {
                        alertDiv.remove();
                    }
                }, 5000);
            }

            // Stop polling when modal is closed
            document.getElementById('qrCodeModal').addEventListener('hidden.bs.modal', function () {
                if (pollingInterval) {
                    clearInterval(pollingInterval);
                    pollingInterval = null;
                }
                
                // Clear QR refresh timer
                if (qrRefreshTimer) {
                    clearInterval(qrRefreshTimer);
                    qrRefreshTimer = null;
                }
                
                // Reset current session
                currentSessionId = null;
            });
        });
    </script>
</body>
</html>

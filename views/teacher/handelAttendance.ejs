<!DOCTYPE html>
<html lang="ar" dir="rtl">

    <%- include("./partials/head.ejs") %>


<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">


<body>
    <style>
        .table-container {
            position: relative;
        }

        .spinner-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 255, 255, 0.356); /* Slight white overlay */
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10;
        }

        .spinner {
            width: 56px;
            height: 56px;
            border-radius: 50%;
            background: conic-gradient(#0000 10%, #474bff);
            -webkit-mask: radial-gradient(farthest-side, #0000 calc(100% - 9px), #000 0);
            animation: spinner-zp9dbg 1s infinite linear;
        }

        @keyframes spinner-zp9dbg {
            to {
                transform: rotate(1turn);
            }
        }

        .table-blur {
            filter: blur(1.3px);
        }
    </style>

    <style>

 #reader {
            width: 300px;
            height: 300px;
            margin: auto;
            border-radius: 10px;
                        border: 2px solid #ffffff;
            display: none;

        }
        #qr-code {
            margin-top: 20px;
        }

        .chapter_Box form input {
            border-radius: 10px;
            background-color: transparent;
            border: 2px solid #ffffff;
            color: #ffffff !important;
            text-align: center;
            font-size: larger;
            font-weight: 900;
            transition: all 0.3s;
        }

        .chapter_Box form input:focus {
            border: 2px solid #affff3;
            background-color: transparent;
            color: #ffffff !important;
        }


        .chapter_Box form button {
            margin-top: 1rem;
            border-radius: 10px;
        }
        
        .spinner {
        
   width: 56px;
   height: 56px;
   border-radius: 50%;
   background: conic-gradient(#0000 10%,#474bff);
   -webkit-mask: radial-gradient(farthest-side,#0000 calc(100% - 9px),#000 0);
   animation: spinner-zp9dbg 1s infinite linear;
}

#Message {
    display: none;
    color: #ffd904;
    text-align: center;
    margin-top: 1rem;
}
@keyframes spinner-zp9dbg {
   to {
      transform: rotate(1turn);
   }
}

@media (max-width: 768px) {
    #myTable{
        font-size: 10px
    }
    
}
        
    </style>
    
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-2" >
                <%- include("./partials/nav.ejs") %>
            </div>
            <!--------------------END ASIDE  ------------------>
   <!-- Modal -->



<!--  END Modal -->
            <div class="col-lg-10 ">
                <main>
                    <div class="row">
                     
                        <div class=" col-md-4 ">
                            <div class="left" style="margin-top: 0.2rem;">
                                <%- include("./partials/top.ejs") %> 

                            </div>
                        </div>

                       
                    </div>


        
 
                    <div class="row">
                        <div class="col-md-12  col-sm-12">
                                <div class="col-md-10">   
                               
                        <select name="centerName" class="Grade" id="centerName" value="" required>
                                <option value=""> اختر السنتر </option>
                                <option value="ZHub">ZHub</option>
                                <option value="tagmo3">Tagmo3</option>
                                <option value="online">online</option>
                                </select>
                                  
                                 <select name="Grade" class="Grade" id="Grade" required>
                                    <option value="" selected>اختر الصف </option>
                                       <option value="EST">EST</option>
                                        <option value="EST1">EST1</option>
                                        <option value="EST2">EST2</option>
                                        <option value="ACT">ACT</option>

                                   </select>
                                   <select name="gradeType" class="Grade" id="gradeType" value="" required>
                                  <option value=""> Type</option>
                                  </select>
                               
                                  <select name="groupTime" class="Grade" id="groupTime" required>
                                <option value="" selected>مجموعه</option>
                               </select>


                                   <select name="Dates" class="Grade" id="Dates">

                                   </select>
                                 
                                   <button type="submit" id="getAttendeesDataBtn" class="btn btn-secondary btn-md me-3 mt-4" disabled> Get Data</button>
                                   
                               </div>
                                <div >
                                    <div id="reader"></div>     
                                </div>
                                                         
                          <div class="student-table">
                            <h2 class="" style="text-align: center;" id="Message">الرجاء إدخال رقم الكارت بشكل صحيح</h2>

                            <input type="text" id="searchInput" class="serachOnaddCard" placeholder="Search By Code" style="padding: 10px; width: 200px;" />

                            <div class="table-container">
                                <div class="spinner-overlay d-none" id="spinnerOverlay">
                                    <div class="spinner"></div>
                                </div>

                                <table id="myTable">
                                    <thead>
                                        <tr>
                                            <th style="padding: 10px;">#</th>
                                            <th style="padding-left: 20px;">Student Name</th>
                                            <th style="padding-left: 20px;">Student Code</th>
                                            <th style="padding-left: 20px;">Student Phone</th>
                                            <th style="padding-left: 20px;">Parent Phone</th>
                                            <th style="padding-left: 20px;">Absences</th>
                                            <th style="padding-left: 20px;">Amount</th>
                                            <th style="padding-left: 20px;">Amount Remaining</th>
                                            <th style="padding-left: 20px;"></th>
                                            <th style="padding-left: 20px;"></th>
                                        </tr>
                                    </thead>
                                    <tbody></tbody>
                                </table>
                            </div>
                        </div>


                   

                      
                        </div>
                    </div>

                    <div class="pagination justify-content-between mb-5">
                           
                        <div class="mx-auto">
                            <button class="paginationBtns" id="ConvertAttadnaceToExcel">Convert To Excel</button> 
                        </div>
                      
                    </div>

                
                </main>
            </div>

            <!-------------------- END OF MAIN --------------------->
         
        </div>
    </div>

    <script src="/assest/bootstrap.bundle.min.js"></script>
    <script src="/assest/bootstrap.min.js"></script>

   <script>
        module = {}
    </script>


  <%- include("../partials/group.ejs") %>



    <script>
        const tableContainer = document.querySelector('.table-container');
const spinnerOverlay = document.getElementById('spinnerOverlay');

function showSpinner() {
    tableContainer.classList.add('table-blur'); // Apply blur
    spinnerOverlay.classList.remove('d-none');  // Show spinner
}

function hideSpinner() {
    tableContainer.classList.remove('table-blur'); // Remove blur
    spinnerOverlay.classList.add('d-none');        // Hide spinner
}


    </script>


    <script>
        const getAttendeesDataBtn = document.getElementById('getAttendeesDataBtn');
        const Grade = document.getElementById('Grade');
        const centerName = document.getElementById('centerName');
        const gradeType  = document.getElementById('gradeType');
        const spinnerInTabel = document.getElementById('spinnerInTabel');
        const GroupTime = document.getElementById('groupTime');
        const Message = document.getElementById('Message');
        const Dates = document.getElementById('Dates');
        const getAttendeesForm = document.getElementById('getAttendees');
        const table = document.querySelector('tbody');

        const ConvertAttadnaceToExcel = document.getElementById('ConvertAttadnaceToExcel') 



         const showMessage = (message, isError = false) => {
            Message.style.display = 'none';
            Message.innerHTML = '';
            Message.style.display = 'inline';
            Message.innerHTML = message;
            Message.style.color = '#ffd904';
        
        };

       
  const populateTable = (students, statusColor, statusText) => {
    console.log('Students:', students);

    // Add a separator row before adding new section
    if (students.length > 0) {
        const separatorRow = document.createElement('tr');
        separatorRow.innerHTML = `
            <td colspan="10" style="padding: 10px; border-bottom: 3px solid black; text-align: center; font-weight: bold; font-size: 1.2rem;">
                ${statusText} Students
            </td>
        `;
        table.appendChild(separatorRow);
    }

    students.forEach((student, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td style="padding-left: 20px;">${index + 1}</td>
            <td style="padding-left: 20px;">${student.Username}</td>
            <td style="padding-left: 20px;">${student.Code}</td>
            <td style="padding-left: 20px;">${student.phone}</td>
            <td style="padding-left: 20px;">${student.parentPhone}</td>
            <td style="padding-left: 20px;">${student.absences}</td>
            <td style="padding-left: 20px;">${student.balance}</td>
            <td style="padding-left: 20px;">
                <input type="number" dir='ltr' value="${student.amountRemaining}"  id="s${student._id}" class="amount-input my-2" />
            </td>
            <td style="padding-left: 20px; color: ${statusColor}; font-weight: bold; font-size: 1.4rem;">
                ${statusText}
            </td>
            <td style="padding-left: 20px;">
                <button type='button' class="btn btn-warning edit-btn" id="${student._id}" onClick='module.editAmountBTN(this.id)'>
                    <i class="fa-solid fa-pen-to-square"></i>
                </button>
            </td>
        `;
        table.appendChild(row);
    });

    // Add an empty row for spacing after the section
    const spacingRow = document.createElement('tr');
    spacingRow.innerHTML = `<td colspan="10" style="height: 20px;"></td>`;
    table.appendChild(spacingRow);
};




        GroupTime.addEventListener('change', async () => {
            // Disable the inputs
            showSpinner()
            if (Grade.value === '' || centerName.value === '' || GroupTime.value === '' || gradeType.value === '') {
                return;
                
            }

            // Create the data object to be sent to the backend
            const data = {
                Grade: Grade.value,
                centerName: centerName.value,
                GroupTime: GroupTime.value,
                gradeType: gradeType.value
            };

            try {
                const response = await fetch('/teacher/handelAttendance/getDates', {
                    method: 'POST', 
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                const responseData = await response.json();

                if (response.ok) {
                    console.log('Dates:', responseData);
                    // Populate the table with student data
                    const Dates = document.getElementById('Dates');
                    Dates.innerHTML = '';
                    const option = document.createElement('option');
                    option.value = '';
                    option.textContent = 'اختر التاريخ';
                    Dates.appendChild(option);
                
                    responseData['Dates'].forEach((date, index) => {
                        const option = document.createElement('option');
                        option.value = date;
                        option.textContent = date;
                        Dates.appendChild(option);
                    });
                    getAttendeesDataBtn.disabled = false;

                    showMessage('Dates fetched successfully.');
                    setTimeout(() => {
                        showMessage('');
                    }, 10000);
                } else {
                    showMessage(responseData.message, true);
                }

               hideSpinner()
            } catch (error) {
                console.error('An error occurred:', error);
            }
        });
        


        getAttendeesDataBtn.addEventListener('click', async () => {
                 showSpinner()
                showMessage("", false); // Clear message


                const data = {
                    Grade: Grade.value,
                    centerName: centerName.value,
                    GroupTime: GroupTime.value,
                    gradeType: gradeType.value,
                    date : Dates.value,
                };

                try {
                    const response = await fetch('/teacher/handelAttendance/getAttendees', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });

                    const responseData = await response.json();
                    if (response.ok) {
                        console.log('Response:', responseData);
                        table.innerHTML = '';
                        populateTable(responseData['attendance'].studentsPresent, '#42ff04', 'Present');
                        populateTable(responseData['attendance'].studentsLate, '#ffd904', 'Late');
                        populateTable(responseData['attendance'].studentsAbsent, '#ff0404', 'Absent');
                        populateTable(responseData['attendance'].studentsExcused, '#42ff04', 'Present From Other Group');

                        showMessage(responseData.message);
                    } else {
                        showMessage(responseData.message, true);
                    }
                } catch (error) {
                    console.error('Error:', error);
                } finally {
                    hideSpinner()
                    
                }
            });




    
        ConvertAttadnaceToExcel.addEventListener('click', async () => {
               showSpinner()
                const data = {
                    Grade: Grade.value,
                    centerName: centerName.value,
                    GroupTime: GroupTime.value,
                    gradeType: gradeType.value,
                    date : Dates.value,
                };

                try {
                    const response = await fetch('/teacher/handelAttendance/convertAttendeesToExcel', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });

                    if (response.ok) {
                        // Convert the response to a blob
                        const blob = await response.blob();

                        // Create a URL for the blob and initiate a download
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = 'attendance_data.xlsx';
                        document.body.appendChild(a);
                        a.click();

                        // Clean up by revoking the object URL and removing the link
                        window.URL.revokeObjectURL(url);
                        a.remove();

                        showMessage('Attendance data converted to Excel successfully.');
                    } else {
                        const responseData = await response.json();
                        showMessage(responseData.message, true);
                    }
                } catch (error) {
                     showMessage(responseData.message, true);

                }finally {
                    hideSpinner()
                }
            });



                // Function to update remaining amount
    async function editAmountBTN(student_id) {
        const inputField = document.getElementById(`s${student_id}`);
        const newAmount = inputField.value;
        await updateAmountRemaining(student_id, newAmount);
    }

    async function updateAmountRemaining(studentId, newAmount) {
           showSpinner()
        try {
            const response = await fetch(`/teacher/addCard/updateAmount/${studentId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ amountRemaining: newAmount })
            });

            const responseData = await response.json();
            if (response.ok) {
                showMessage(responseData.message);
            } else {
                showMessage('Failed to update amount', true);
            }
        } catch (error) {
            console.error('Error updating amount:', error);
        } finally {
            hideSpinner()
        }
    }



    module.editAmountBTN = editAmountBTN;
    </script>


    <script>
        const searchInput = document.getElementById('searchInput');

    searchInput.addEventListener('input', function() {
        const filter = searchInput.value.toLowerCase();
        const rows = table.getElementsByTagName('tr');
        
        // Loop through all table rows (excluding the first row with the table headers)
        for (let i = 1; i < rows.length; i++) {
            const studentNameCell = rows[i].getElementsByTagName('td')[1]; // Assuming the student name is in the second column
            const studentCodeCell = rows[i].getElementsByTagName('td')[2]; // Assuming the student code is in the third column
            const studentName = studentNameCell ? studentNameCell.textContent.toLowerCase() : '';
            const studentCode = studentCodeCell ? studentCodeCell.textContent.toLowerCase() : '';

            // If the student name or code matches the search query, display the row; otherwise, hide it
            if (studentName.includes(filter) || studentCode.includes(filter)) {
                rows[i].style.display = '';
            } else {
                rows[i].style.display = 'none';
            }
        }
    });

    </script>

</body>


</html>
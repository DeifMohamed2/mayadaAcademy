<!DOCTYPE html>
<html lang="ar" dir="rtl">

    <%- include("./partials/head.ejs") %>


<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">


<body>

    <style>

 #reader {
            width: 300px;
            height: 300px;
            margin: auto;
            border-radius: 10px;
                        border: 2px solid #ffffff;
            display: none;

        }
        #qr-code {
            margin-top: 20px;
        }

        .chapter_Box form input {
            border-radius: 10px;
            background-color: transparent;
            border: 2px solid #ffffff;
            color: #ffffff !important;
            text-align: center;
            font-size: larger;
            font-weight: 900;
            transition: all 0.3s;
        }

        .chapter_Box form input:focus {
            border: 2px solid #affff3;
            background-color: transparent;
            color: #ffffff !important;
        }


        .chapter_Box form button {
            margin-top: 1rem;
            border-radius: 10px;
        }
        
        .spinner {
                    
            width: 56px;
            height: 56px;
            border-radius: 50%;
            background: conic-gradient(#0000 10%,#474bff);
            -webkit-mask: radial-gradient(farthest-side,#0000 calc(100% - 9px),#000 0);
            animation: spinner-zp9dbg 1s infinite linear;
        }

#Message {
    display: none;
    color: #ffd904;
    text-align: center;
    margin-top: 1rem;
}

@keyframes spinner-zp9dbg {
   to {
      transform: rotate(1turn);
   }
}

@media (max-width: 768px) {
    #myTable{
        font-size: 10px
    }
    
}
        
    </style>

    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-2" >
                <%- include("./partials/nav.ejs") %>
            </div>
            <!--------------------END ASIDE  ------------------>
   <!-- Modal -->



<!--  END Modal -->
            <div class="col-lg-10 ">
                <main>
                    <div class="row">
                     
                        <div class=" col-md-4 ">
                            <div class="left" style="margin-top: 0.2rem;">
                                <%- include("./partials/top.ejs") %> 

                            </div>
                        </div>

                       
                    </div>


                    <div class="text-center">
                                <button type="button" id="ShowStudentCardAdded" class="btn btn-secondary btn-lg px-4">اظهار اضافه كارت طالب</button>
                     </div>
                    
                 <div class="row justify-content-center d-none" id="boxOfCardAdded">
                    <div class="col-md-8">
                        <div class=" p-4 chapter_Box">
                            <h2 class="text-center mb-4">اضف كارت الي طالب</h2>
                            <form action="/teacher/addCardToStudent" method="post" >
                                <div class="row align-items-center">
                                    <!-- Code -->
                                    <div class="col-md-5 mb-3">
                                        <label for="studentCode" class="form-label">كود الطالب</label>
                                        <input type="number" class="form-control form-control-sm" id="studentCode" name="studentCode" required>
                                    </div>

                                    <!-- Icon for transferring -->
                                    <div class="col-md-2 text-center " style="color: #ffff;">
                                        <i class="bi bi-arrow-left-right fs-2"></i>
                                    </div>

                                    <!-- Card Assigned To -->
                                    <div class="col-md-5 mb-3">
                                        <label for="assignedCard" class="form-label">رقم الكارت</label>
                                        <input type="number" class="form-control form-control-sm" id="assignedCard" name="assignedCard" required>
                                    </div>
                                </div>

                                <div class="spinner d-none mx-auto" id="spinner"></div>

                                <div class="studentData col-12 d-none" style="color: rgb(0, 181, 0);" id="StudentData">
                                    
                                    <h1 id="fgsagatgagt"></h1>
                                    <h2>اسم الطالب : <span id="studentName"></span></h2>
                                </div>

                              
                                <!-- Submit Button -->
                                <div class="text-center">
                                    <button type="submit" class="btn btn-primary btn-md px-4">Add</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>

                <hr>
 
                    <div class="row">
                        <div class="col-md-12  col-sm-12">
                            <form action="/teacher/addCard/markAttendance" method="post" id="attendUserForm">
                                <div class="col-md-10">   
                                    
                     
                                <select name="centerName" class="Grade" id="centerName" value="" required>
                                <option value=""> اختر السنتر </option>
                                <option value="maadi">Maadi</option>
                                <option value="tagmo3">Tagmo3</option>
                                <option value="online">online</option>
                                </select>
      

                                   <select name="Grade" class="Grade" id="Grade" required>
                                    <option value="" selected>اختر الصف </option>
                                       <option value="EST">EST</option>
                                        <option value="EST1">EST1</option>
                                        <option value="EST2">EST2</option>
                                        <option value="ACT">ACT</option>

                                   </select>

                                <select name="gradeType" class="Grade" id="gradeType" value="" required>
                                <option value=""> Type</option>
                                </select>
                                            
                                 <select name="groupTime" class="Grade" id="groupTime" required>
                                <option value="" selected>مجموعه</option>
                               </select>

                                 
                                   <button type="button" id="saveAndStart" class="btn btn-secondary btn-md me-3 mt-4">  حفظ والبدأ </button>
                                   
                               </div>
                                <div >
                                    <div id="reader"></div>     
                                </div>
                             <div class="row" dir="ltr">
            
                                    <div class="col-md-3">
                                        <div class="form-check mt-3">
                                            <input type="checkbox" class="form-check-input" id="attendAbsencet">
                                            <label class="form-check-label" for="attendAbsencet">Attend & Ignore Absences Policy</label>
                                        </div>

                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-check mt-3">
                                            <input type="checkbox" class="form-check-input" id="attendOtherGroup">
                                            <label class="form-check-label" for="attendOtherGroup">Attend & Ignore Group Policy</label>
                                        </div>
<!-- 
                                    </div>
                                              <div class="col-md-3">
                                        <div class="form-check mt-3">
                                            <input type="checkbox" class="form-check-input" id="HWwithOutSteps">
                                            <label class="form-check-label" for="HWwithOutSteps">HW WithOut Steps</label>
                                        </div>

                                    </div>
                                    <div class="col-md-3">
                                        <div class="form-check mt-3">
                                            <input type="checkbox" class="form-check-input" id="attendWithOutHW">
                                            <label class="form-check-label" for="attendWithOutHW">Attend WithOut HW</label>
                                        </div>

                                    </div> -->
                                </div>
                            <div class="student-table">
                                    <div class="row" style="margin-bottom: 0 !important;">
                                                  
                                       
                                        <div class="col-md-4"> 
                                                
                                            <input type="number"  class="serachOnaddCard "  name="attendeeID" id="attendeeID" placeholder="CodeORCard" required>

                                            <button type="button" class="btn  btn-outline-warning btn-md me-3 mt-5" id="openQrCamera"> <i class="fa-solid fa-camera"></i> استدخدام الكاميرا  </button>
                                           
                                            <button type="submit" class="btn btn-outline-warning btn-md me-3 mt-5" >   اضف بشكل يدوي </button>

                                            
                                        </div>
                                        
                                        
                                        <h2 class=" " style="text-align: center;" id="Message" >الرجاء إدخال رقم الكارت بشكل صحيح</h2>
                                        <h2><span id="NumberOfParentsSendingMessages"  style="text-align: center;" class=" d-none warning "></span></h2>
                                   

                                    </div>
                                    
                                    <div class="spinner d-none mx-auto" id="spinnerInTabel"></div>
               
                               
                             
                                <table id="myTable">
                                    <thead>
                                        <th style="padding: 10px;"># </th>
                                        <th style="padding-left: 20px;"> Student Name</th>
                                        <th style="padding-left: 20px;"> Student Code</th>
                                        <th style="padding-left: 20px;"> Student Phone</th>
                                        <th style="padding-left: 20px;"> Parent Phone </th>
                                        <th style="padding-left: 20px;"> Absences </th>
                                        <th style="padding-left: 20px;"> Amount </th>
                                        <th style="padding-left: 20px;"> Amount Remaining </th>
                                        <th style="padding-left: 20px;"></th>
                                        <th style="padding-left: 20px;"></th>
                             
                                    </thead>

                                    <tbody >
                           
                                    </tbody>
                                </table>

                            </div>
                      </form>

                      
                        </div>
                    </div>

                    <div class="pagination justify-content-between mb-5">
                           
                        <div class="mx-auto">
                            <button class="paginationBtns" id="finalizeAndConvertToExcel">Finalize And Convert To Excel</button> 
                        </div>
                        
                      
                    </div>

                
                </main>
            </div>

            <!-------------------- END OF MAIN --------------------->
         
        </div>
    </div>

    <script src="/assest/bootstrap.bundle.min.js"></script>
    <script src="/assest/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html5-qrcode/2.3.8/html5-qrcode.min.js"></script>


  <%- include("../partials/group.ejs") %>

    <!-- Add Card To Student  -->
    <script>

        const form = document.querySelector('form');
        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const spinner = document.getElementById('spinner');
       
            const studentCode = document.getElementById('studentCode').value;
            const assignedCard = document.getElementById('assignedCard').value;
            const studentNameElement = document.getElementById('studentName');
            const messageElement = document.getElementById('fgsagatgagt');
            const studentDataElement = document.getElementById('StudentData');

         
            spinner.classList.remove('d-none');
            studentDataElement.classList.add('d-none');
            if (!studentCode || !assignedCard) {
                console.error('Both studentCode and assignedCard are required.');
                return;
            }

            const data = {
                studentCode: studentCode,
                assignedCard: assignedCard
            };

            try {
                const response = await fetch('/teacher/addCard', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                const responseData = await response.json();
             


                if (response.ok) {
                    spinner.classList.add('d-none');
                    // Set student name and success message
                    studentNameElement.textContent = responseData.Username || "Unknown";
                    messageElement.textContent = responseData.message || "Success!";
                    studentDataElement.classList.remove('d-none');
                    studentDataElement.style.color = '#00bc00'; // Set color to green for success
                    form.reset();
                } else {
                    spinner.classList.add('d-none');
                    // Set error message and clear the student's name if not found
                    messageElement.textContent = responseData.message || 'An error occurred. Please try again.';
                    studentNameElement.textContent = responseData.Username || "Unknown";
                    studentDataElement.classList.remove('d-none');
                    studentDataElement.style.color = 'red'; // Set color to red for errors
                    form.reset();
                }
            } catch (error) {
                spinner.classList.add('d-none');
                console.error('An error occurred:', error);
                const messageElement = document.getElementById('message');
                const studentDataElement = document.getElementById('StudentData');

                messageElement.textContent = 'A network error occurred.';
                studentDataElement.classList.remove('d-none');
                studentDataElement.style.color = 'red';
            }
        });

    </script>

    <script>

        const ShowStudentCardAdded = document.getElementById('ShowStudentCardAdded');
        const boxOfCardAdded = document.getElementById('boxOfCardAdded');
         
        ShowStudentCardAdded.addEventListener('click', () => {
            boxOfCardAdded.classList.toggle('d-none');
            ShowStudentCardAdded .textContent = boxOfCardAdded.classList.contains('d-none') ? 'اظهار اضافه كارت طالب' : 'اخفاء اضافه كارت طالب';
        });

    </script>

    <!-- END Add Card To Student  -->

    <!-- get Attendance all in First Time -->




    <!-- Attendance -->
    <script>
        module = {}
    </script>

  <script>
    const saveAndStart = document.getElementById('saveAndStart');
    const Grade = document.getElementById('Grade');
    const centerName = document.getElementById('centerName');
    const gradeType = document.getElementById('gradeType');
    const GroupTime = document.getElementById('groupTime');
    const CardType = document.getElementById('CardType');
    const attendeeID = document.getElementById('attendeeID');
    const spinnerInTabel = document.getElementById('spinnerInTabel');
    const Message = document.getElementById('Message');
    const attendUserForm = document.getElementById('attendUserForm');
    const finalizeAndConvertToExcel = document.getElementById('finalizeAndConvertToExcel');

    const attendAbsencet = document.getElementById('attendAbsencet');
    const attendOtherGroup = document.getElementById('attendOtherGroup');

    // const HWwithOutSteps = document.getElementById('HWwithOutSteps')
    // const attendWithOutHW = document.getElementById('attendWithOutHW')

    const table = document.querySelector('tbody');

    const showMessage = (message, isError = false) => {
        Message.style.display = 'none';
        Message.innerHTML = '';
        Message.style.display = 'inline';
        Message.innerHTML = message;
        Message.style.color = '#ffd904';
      
    };

    const disableInputs = () => {
        spinnerInTabel.classList.remove('d-none');
        Grade.setAttribute('disabled', 'disabled');
        centerName.setAttribute('disabled', 'disabled');
        GroupTime.setAttribute('disabled', 'disabled');
        gradeType.setAttribute('disabled', 'disabled'); 
        attendeeID.focus();
    };

    const enableInputs = () => {
       spinnerInTabel.classList.add('d-none');
       attendAbsencet.checked = false;
       attendOtherGroup.checked = false;
    //    HWwithOutSteps.checked = false;
    //    attendWithOutHW.checked = false;
       attendeeID.focus();
    };

    const populateTable = (students, statusColor, statusText) => {
       
    
     
        students.forEach((student, index) => {
            const row = document.createElement('tr');
            let statusTd = ` <td style="padding-left: 20px; color: ${statusColor}; font-weight: bold; font-size: 1.4rem;">
                    ${statusText}
                </td>
                
                      <td style="padding-left: 20px;">
                    <button type='button' class="btn btn-danger delete-btn" data-id="${student._id}">
                        <i class="fa-solid fa-trash"></i>
                    </button>
                </td>
                `;
            if(statusText == 'Present From Group'){
                statusTd = 
                `<td style="padding-left: 20px; color: ${statusColor}; font-weight: bold; font-size: 1rem;" >
                    ${statusText}  ${student.centerName} - ${student.Grade} - ${student.groupTime} 
        
            
                </td>
                    `
            }
            row.innerHTML = `
                <td style="padding-left: 20px;">${index + 1}</td>
                <td style="padding-left: 20px;">${student.Username}</td>
                <td style="padding-left: 20px;">${student.Code}</td>
                <td style="padding-left: 20px;">${student.phone}</td>
                <td style="padding-left: 20px;">${student.parentPhone}</td>
                <td style="padding-left: 20px;">${student.absences}</td>
                <td style="padding-left: 20px;">${student.balance}</td>
                <td style="padding-left: 20px;">
                    <input type="number" dir='ltr' value="${student.amountRemaining}" id="s${student._id}" class="amount-input my-2" />
                </td>
                
                ${statusTd}

                <td style="padding-left: 20px;">
                    <button type='button' class="btn btn-warning edit-btn" id="${student._id}" onClick='module.editAmountBTN(this.id)'>
                        <i class="fa-solid fa-pen-to-square"></i>
                    </button>
                </td>
            `;
            table.appendChild(row);
        });
    };

    // Event handler for saving and starting attendance
    saveAndStart.addEventListener('click', async () => {
        disableInputs();
        showMessage("", false); // Clear message


        const data = {
            Grade: Grade.value,
            centerName: centerName.value,
            GroupTime: GroupTime.value,
            gradeType : gradeType.value,
            
        };

        try {
            const response = await fetch('/teacher/addCard/getAttendedUsers', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            const responseData = await response.json();
            if (response.ok) {
            
                table.innerHTML = '';
                populateTable(responseData['attendance'].studentsPresent, '#42ff04', 'Present');
                populateTable(responseData['attendance'].studentsLate, '#ffd904', 'Late');
                populateTable(responseData['attendance'].studentsExcused, '#42ff04', 'Present From Group');
                addDeleteEventListeners();
            } else {
                showMessage(responseData.message, true);
            }
        } catch (error) {
            console.error('Error:', error);
        } finally {
            enableInputs();
            attendeeID.value = "";
            attendeeID.focus();
        }
    });

    // Event handler for submitting attendance form
    attendUserForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        disableInputs();
        
        const data = {
            Grade: Grade.value,
            centerName: centerName.value,
            GroupTime: GroupTime.value,
            gradeType : gradeType.value,
            attendAbsencet : attendAbsencet.checked,
            attendOtherGroup : attendOtherGroup.checked,
            // HWwithOutSteps : HWwithOutSteps.checked,
            // attendWithOutHW : attendWithOutHW.checked,
            attendId: attendeeID.value
        };

        try {
            const response = await fetch('/teacher/addCard/markAttendance', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data)
            });

            const responseData = await response.json();
            console.log(responseData)
            if (response.ok) {
                   table.innerHTML = '';
                populateTable(responseData.studentsPresent, '#42ff04', 'Present');
                populateTable(responseData.studentsLate, '#ffd904', 'Late');
                populateTable(responseData.studentsExcused, '#42ff04', 'Present From Group');
                addDeleteEventListeners();
                showMessage(responseData.message);
            } else {
                showMessage(responseData.message, true);
            }
        } catch (error) {
            console.error('Error:', error);
        } finally {
            enableInputs();
            attendeeID.value = "";
            attendeeID.focus();
        }
    });

    finalizeAndConvertToExcel.addEventListener('click', async () => {
    disableInputs();
    showMessage("Please don't close the page until the process is done");

    const data = {
        Grade: Grade.value,
        centerName: centerName.value,
        GroupTime: GroupTime.value,
        gradeType :gradeType.value
    };

    try {
        const response = await fetch('/teacher/addCard/finalizeAttendance', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
        });

        if (response.ok) {
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', 'attendance_data.xlsx'); // Set the file name
        document.body.appendChild(link);
        link.click();
        link.remove();

        showMessage('Attendance has been finalized and the Excel file has been downloaded\n Now Any student come will be marked as Late');
        } else {
        const responseData = await response.json();
        showMessage(responseData.message, true);
        }
    } catch (error) {
        console.error('Error:', error);
        showMessage('An error occurred while finalizing attendance.', true);
    } finally {
        enableInputs();
    }
    });

    // Function to update remaining amount
    async function editAmountBTN(student_id) {
        const inputField = document.getElementById(`s${student_id}`);
        const newAmount = inputField.value;
        await updateAmountRemaining(student_id, newAmount);
    }

    async function updateAmountRemaining(studentId, newAmount) {
        disableInputs();
        try {
            const response = await fetch(`/teacher/addCard/updateAmount/${studentId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ amountRemaining: newAmount })
            });

            const responseData = await response.json();
            if (response.ok) {
                showMessage(responseData.message);
            } else {
                showMessage('Failed to update amount', true);
            }
        } catch (error) {
            console.error('Error updating amount:', error);
        } finally {
            enableInputs();
        }
    }

    // Function to delete attendance
    async function deleteAttendance(studentId, rowToDelete) {
        disableInputs();
        try {
            const data = {
                    Grade: Grade.value,
                    centerName: centerName.value,
                    GroupTime: GroupTime.value,
                    gradeType : gradeType.value
                };

                const response = await fetch(`/teacher/addCard/removeAttendance/${studentId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

            const responseData = await response.json();
            if (response.ok) {
                rowToDelete.remove();
                showMessage(responseData.message);
            } else {
                showMessage(responseData.message, true);
            }
        } catch (error) {
            console.error('Error deleting attendance:', error);
        } finally {
            enableInputs();
        }
    }

    // Add delete event listeners dynamically
    function addDeleteEventListeners() {
        const deleteButtons = document.querySelectorAll('.delete-btn');
        deleteButtons.forEach(button => {
            button.addEventListener('click', async (e) => {
                const button = e.target.closest('.delete-btn');
                const studentId = button.getAttribute('data-id');
                const rowToDelete = button.closest('tr');
                await deleteAttendance(studentId, rowToDelete);
            });
        });
    }

    module.editAmountBTN = editAmountBTN;
</script>





<!-- QR CODE SCAANER -->
    <script>
        // QR Code Scanner
        const openQrCamera = document.getElementById("openQrCamera");
        const reader = document.getElementById("reader");
        const result = document.getElementById("result");
        openQrCamera.addEventListener("click", function() {
            reader.style.display = "block";
            const html5QrCode = new Html5Qrcode("reader");

            html5QrCode.start(
                { facingMode: "environment" }, // use back camera
                {
                    fps: 24, // Optional, frame per second for qr code scanning
                    qrbox: { width: 400, height: 400 } // Optional, scanning box
                },
                (decodedText, decodedResult) => {
                    console.log(`QR Code detected: ${decodedText}`);
                    attendeeID.value = decodedText;
                    html5QrCode.stop().then(() => {
                        reader.style.display = "none";
                    }).catch(err => {
                        console.error("Error stopping QR Code scan.", err);
                    });
                },
                (Message) => {
                    // parse error, ignore it
                }
            ).catch(err => {
                console.error("Unable to start scanning.", err);
            });

        });
    </script>



    <script src="/socket.io/socket.io.js"></script>

    <script>
        const NumberOfParentsSendingMessages = document.getElementById('NumberOfParentsSendingMessages')

           const socket = io();

               socket.on('sendingToParents', (data) => {
                 NumberOfParentsSendingMessages.classList.remove('d-none') 
                  NumberOfParentsSendingMessages.innerHTML= data.nPhone
             });
    </script>

</body>


</html>